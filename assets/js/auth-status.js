// hugo-cookbook-theme/assets/js/auth-status.js

/**
 * Ce script est charg√© sur toutes les pages du site.
 * Il v√©rifie l'√©tat d'authentification via la pr√©sence du token CMS dans localStorage
 * pour mettre √† jour l'interface du header. Cette approche est robuste et
 * d√©coupl√©e du fonctionnement interne du CMS Sveltia.
 */

import { getAccount, isAuthenticated, getUserEmail, clearAuthData, getAuthenticationState } from './appwrite-client.js';

// --- √âL√âMENTS DU DOM ---
const loggedOutState = document.getElementById('header-logged-out');
const loggedInState = document.getElementById('header-logged-in');
const userEmailDisplay = document.getElementById('header-user-email-display');
const logoutButton = document.getElementById('header-logout-button');



/**
 * Met √† jour l'interface du header en se basant sur l'√©tat d'authentification complet
 * pour g√©rer les cas o√π une action utilisateur est requise (email non v√©rifi√©).
 */
async function updateHeaderUI() {
  // console.log("üé® [Auth-Status] updateHeaderUI appel√©e");
  
  try {
    // V√©rifier d'abord l'authentification locale (CMS)
    const userEmail = getUserEmail();
    const authenticated = isAuthenticated();
    
    if (authenticated) {
      // Utilisateur authentifi√© localement - afficher l'√©tat connect√©
      if (loggedOutState) loggedOutState.style.display = 'none';
      if (loggedInState) loggedInState.style.display = 'block';

      if (userEmailDisplay && userEmail) {
        userEmailDisplay.textContent = userEmail;
      }

      // Essayer de r√©cup√©rer l'√©tat complet d'authentification pour la v√©rification d'email
      try {
        const authState = await getAuthenticationState();
        
        // Styliser diff√©remment le bouton si une action est requise
        const userDropdownButton = document.getElementById('navbarUserDropdown');
        if (userDropdownButton) {
          if (authState.requiresAction) {
            // console.log("‚ö†Ô∏è [Auth-Status] Action requise - style d'avertissement");
            userDropdownButton.className = 'btn btn-warning btn-sm dropdown-toggle d-flex align-items-center';
            userDropdownButton.title = 'Email non v√©rifi√© - Cliquez pour plus d\'informations';
          } else {
            // console.log("‚úÖ [Auth-Status] Aucune action requise - style normal");
            userDropdownButton.className = 'btn btn-primary btn-sm dropdown-toggle d-flex align-items-center';
            userDropdownButton.title = 'Menu utilisateur';
          }
        }
      } catch (authError) {
        // Si impossible de v√©rifier l'√©tat Appwrite, utiliser un style d'avertissement par d√©faut
        console.warn("‚ö†Ô∏è [Auth-Status] Impossible de v√©rifier l'√©tat email - utilisation style d'avertissement:", authError);
        const userDropdownButton = document.getElementById('navbarUserDropdown');
        if (userDropdownButton) {
          userDropdownButton.className = 'btn btn-warning btn-sm dropdown-toggle d-flex align-items-center';
          userDropdownButton.title = 'Statut de v√©rification inconnu - Cliquez pour plus d\'informations';
        }
      }
    } else {
      // console.log("üîì [Auth-Status] Utilisateur d√©connect√© - masquage √©tat connect√©");
      if (loggedInState) loggedInState.style.display = 'none';
      if (loggedOutState) loggedOutState.style.display = 'block';
    }

    // console.log("üé® [Auth-Status] updateHeaderUI termin√©e");
  } catch (error) {
    console.warn("‚ö†Ô∏è [Auth-Status] Erreur critique lors de la mise √† jour du header:", error);
    // Fallback vers l'ancien comportement en cas d'erreur critique
    const userEmail = getUserEmail();
    const authenticated = isAuthenticated();
    if (loggedInState && authenticated) {
      if (loggedOutState) loggedOutState.style.display = 'none';
      loggedInState.style.display = 'block';
      if (userEmailDisplay && userEmail) {
        userEmailDisplay.textContent = userEmail;
      }
      // Style d'avertissement par d√©faut en cas d'erreur
      const userDropdownButton = document.getElementById('navbarUserDropdown');
      if (userDropdownButton) {
        userDropdownButton.className = 'btn btn-warning btn-sm dropdown-toggle d-flex align-items-center';
        userDropdownButton.title = 'Erreur de v√©rification - Cliquez pour plus d\'informations';
      }
    } else {
      if (loggedInState) loggedInState.style.display = 'none';
      if (loggedOutState) loggedOutState.style.display = 'block';
    }
  }
}

/**
 * G√®re la d√©connexion compl√®te de l'utilisateur.
 */
async function handleLogout() {
  if (!logoutButton) return;

  logoutButton.disabled = true;
  logoutButton.textContent = 'D√©connexion...';

  try {
    clearAuthData();
    const account = await getAccount();
    await account.deleteSession('current');
    // console.log("Session Appwrite supprim√©e avec succ√®s.");
  } catch (error) {
    console.error("Erreur lors de la suppression de la session Appwrite:", error);
  } finally {
    window.location.href = '/';
  }
}

// --- LOGIQUE PRINCIPALE ---
document.addEventListener('DOMContentLoaded', async () => {

  if (window.location.pathname === '/login/' || window.location.pathname === '/login') {
    return;
  }
    await updateHeaderUI();

  // 2. Attacher l'√©couteur d'√©v√©nement pour la d√©connexion
  if (logoutButton) {
    // console.log("‚úÖ [Auth-Status] √âcouteur de d√©connexion attach√©");
    logoutButton.addEventListener('click', handleLogout);
  }
});
