// hugo-cookbook-theme/assets/js/auth-status.js

/**
 * Ce script est charg√© sur toutes les pages du site.
 * Il v√©rifie l'√©tat d'authentification via la pr√©sence du token CMS dans localStorage
 * pour mettre √† jour l'interface du header. Cette approche est robuste et
 * d√©coupl√©e du fonctionnement interne du CMS Sveltia.
 */

import { getAccount, isAuthenticatedCms, getUserEmail, clearAuthData,  getLocalEmailVerificationStatus } from './appwrite-client.js';

// --- √âL√âMENTS DU DOM ---
const loggedOutState = document.getElementById('header-logged-out');
const loggedInState = document.getElementById('header-logged-in');
const userEmailDisplay = document.getElementById('header-user-email-display');
const logoutButton = document.getElementById('header-logout-button');
const btnLoggedOut = document.getElementById('btnLoggedOut');


/**
 * Met √† jour l'interface du header en se basant sur l'√©tat d'authentification complet
 * pour g√©rer les cas o√π une action utilisateur est requise (email non v√©rifi√©).
 */
async function updateHeaderUI() {
  // console.log("üé® [Auth-Status] updateHeaderUI appel√©e");

    // V√©rifier l'authentification locale (CMS)
    const userEmail = getUserEmail();
    const authenticatedCms = isAuthenticatedCms();
    const emailVerificationStatus = getLocalEmailVerificationStatus();

    if (authenticatedCms) {
      console.log("üîì [Auth-Status] Utilisateur connect√© localement (cms)");
      if (loggedOutState) loggedOutState.style.display = 'none';
      if (loggedInState) loggedInState.style.display = 'block';
      if (userEmailDisplay && userEmail) {
        userEmailDisplay.textContent = userEmail;
      }
    } else if (emailVerificationStatus === 'not_verified') {
      console.log("üîì [Auth-Status] Email non v√©rifi√©");
      if (loggedOutState) {
        btnLoggedOut.className = 'btn btn-outline-warning btn-sm d-flex align-items-center';
        btnLoggedOut.title = 'Email non v√©rifi√©';
        loggedOutState.style.display = 'block';
      }


    } else {
      console.log("üîì [Auth-Status] Utilisateur d√©connect√© - masquage √©tat connect√©");
      if (loggedInState) loggedInState.style.display = 'none';
      if (loggedOutState) loggedOutState.style.display = 'block';
    }
    // console.log("üé® [Auth-Status] updateHeaderUI termin√©e");
  }

/**
 * G√®re la d√©connexion compl√®te de l'utilisateur.
 */
async function handleLogout() {
  if (!logoutButton) return;

  logoutButton.disabled = true;
  logoutButton.textContent = 'D√©connexion...';

  try {
    clearAuthData();
    const account = await getAccount();
    await account.deleteSession('current');
    console.log("Session Appwrite supprim√©e avec succ√®s.");
  } catch (error) {
    console.error("Erreur lors de la suppression de la session Appwrite:", error);
  } finally {
    window.location.href = '/';
  }
}

// --- LOGIQUE PRINCIPALE ---
document.addEventListener('DOMContentLoaded', async () => {

  if (window.location.pathname === '/login/' || window.location.pathname === '/login') {
    return;
  }
    await updateHeaderUI();

  // 2. Attacher l'√©couteur d'√©v√©nement pour la d√©connexion
  if (logoutButton) {
    console.log("‚úÖ [Auth-Status] √âcouteur de d√©connexion attach√©");
    logoutButton.addEventListener('click', handleLogout);
  }
});
