#!/usr/bin/env node

/**
 * Script principal d'orchestration de la migration compl√®te
 * 
 * Ce script ex√©cute les trois √©tapes de migration dans l'ordre:
 * 1. migrate-content.js - Ajout des UUID et transformation initiale
 * 2. update-ingredient-references.js - Mise √† jour des r√©f√©rences et renommage
 * 3. verify-migration.js - V√©rification finale
 */

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import { main as backupBeforeMigration } from './backup-before-migration.js';
import { fileURLToPath } from 'url';

// Reconstitution __dirname en ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configuration
const SCRIPTS_DIR = __dirname;
const REPORTS = [
  'migration-report.json',
  'migration-final-report.json', 
  'verification-report.json'
];

// Fonction pour ex√©cuter une commande
function runCommand(command, description) {
  console.log(`\nüöÄ ${description}...`);
  console.log(`üìù Commande: ${command}`);
  
  try {
    const startTime = Date.now();
    execSync(command, { 
      cwd: SCRIPTS_DIR,
      stdio: 'inherit',
      encoding: 'utf8'
    });
    const duration = (Date.now() - startTime) / 1000;
    console.log(`‚úÖ ${description} termin√©e en ${duration.toFixed(1)}s`);
    return true;
  } catch (error) {
    console.error(`‚ùå Erreur lors de ${description}:`);
    console.error(error.message);
    return false;
  }
}

// Fonction pour nettoyer les anciens rapports
function cleanReports() {
  console.log('\nüßπ Nettoyage des anciens rapports...');
  
  REPORTS.forEach(report => {
    const reportPath = path.join(SCRIPTS_DIR, report);
    if (fs.existsSync(reportPath)) {
      fs.unlinkSync(reportPath);
      console.log(`  üóëÔ∏è  Supprim√©: ${report}`);
    }
  });
}

// Fonction pour v√©rifier si un rapport existe
function reportExists(reportName) {
  return fs.existsSync(path.join(SCRIPTS_DIR, reportName));
}

// Fonction pour afficher un r√©sum√©
function showSummary() {
  console.log('\nüìä R√©sum√© de la migration:');
  
  if (reportExists('verification-report.json')) {
    const verification = JSON.parse(fs.readFileSync(path.join(SCRIPTS_DIR, 'verification-report.json'), 'utf8'));
    const { summary } = verification;
    
    console.log(`   Ingr√©dients valides: ${summary.validIngredients}/${summary.totalIngredients}`);
    console.log(`   Recettes valides: ${summary.validRecettes}/${summary.totalRecettes}`);
    
    if (summary.invalidIngredients === 0 && summary.invalidRecettes === 0) {
      console.log('\nüéâ Migration r√©ussie! Tous les fichiers sont valides.');
      return true;
    } else {
      console.log('\n‚ö†Ô∏è  Migration termin√©e avec des erreurs.');
      return false;
    }
  } else {
    console.log('\n‚ùå Rapport de v√©rification non trouv√©.');
    return false;
  }
}

// Fonction principale
async function main() {
  console.log('üéØ D√©marrage de la migration compl√®te ENKA Cookbook');
  console.log('===============================================');
  console.log('‚ö†Ô∏è  Assurez-vous d\'avoir une sauvegarde de votre dossier content/');
  console.log('‚è±Ô∏è  Cette op√©ration peut prendre plusieurs minutes...\n');
  
  // Demander confirmation
  const readline = await import('readline');
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  
  const answer = await new Promise(resolve => {
    rl.question('Continuer la migration? (oui/non): ', resolve);
  });
  
  rl.close();
  
  if (answer.toLowerCase() !== 'oui') {
    console.log('\n‚ùå Migration annul√©e.');
    process.exit(0);
  }
  
  console.log('\n‚úÖ Confirmation re√ßue, d√©marrage de la migration...\n');
  
  // √âtape 0: Sauvegarde
  console.log('üì¶ Cr√©ation d\'une sauvegarde avant migration...');
  try {
    const backupPath = backupBeforeMigration();
    console.log(`‚úÖ Sauvegarde cr√©√©e: ${backupPath}`);
  } catch (error) {
    console.error('‚ùå √âchec de la sauvegarde:', error.message);
    console.error('‚ùå Migration annul√©e pour prot√©ger vos donn√©es.');
    process.exit(1);
  }
  
  // √âtape 1: Nettoyage
  cleanReports();
  
  // √âtape 2: Migration initiale
  const step1Success = runCommand(
    'node migrate-content.js', 
    '√âtape 2/4: Ajout des UUID et transformation initiale'
  );
  
  if (!step1Success) {
    console.error('\n‚ùå √âchec √† l\'√©tape 1. Arr√™t de la migration.');
    process.exit(1);
  }
  
  // V√©rifier que le rapport interm√©diaire a √©t√© cr√©√©
  if (!reportExists('migration-report.json')) {
    console.error('\n‚ùå Rapport de migration non trouv√© apr√®s l\'√©tape 1.');
    process.exit(1);
  }
  
  // √âtape 3: Mise √† jour des r√©f√©rences
  const step2Success = runCommand(
    'node update-ingredient-references.js',
    '√âtape 3/4: Mise √† jour des r√©f√©rences et renommage'
  );
  
  if (!step2Success) {
    console.error('\n‚ùå √âchec √† l\'√©tape 2. Arr√™t de la migration.');
    process.exit(1);
  }
  
  // √âtape 4: V√©rification
  const step3Success = runCommand(
    'node verify-migration.js',
    '√âtape 4/4: V√©rification finale'
  );
  
  if (!step3Success) {
    console.error('\n‚ùå √âchec √† l\'√©tape 3. La migration a rencontr√© des probl√®mes.');
    process.exit(1);
  }
  
  // Afficher le r√©sum√© final
  const success = showSummary();
  
  if (success) {
    console.log('\nüéØ Prochaines √©tapes:');
    console.log('   1. Testez le build Hugo: cd ../.. && hugo --minify');
    console.log('   2. V√©rifiez que les layouts fonctionnent correctement');
    console.log('   3. Mettez √† jour la configuration Sveltia CMS si n√©cessaire');
    console.log('   4. Lancez le serveur de d√©veloppement: hugo server -D -F');
    console.log('   5. Une fois valid√©, vous pouvez supprimer la sauvegarde si tout est bon');
    
    console.log('\nüéâ Migration termin√©e avec succ√®s!');
    console.log('üíæ Une sauvegarde a √©t√© cr√©√©e au cas o√π vous auriez besoin de restaurer.');
    process.exit(0);
  } else {
    console.log('\nüîß Veuillez corriger les erreurs avant de continuer.');
    console.log('   Consultez le fichier verification-report.json pour plus de d√©tails.');
    console.log('üíæ Vous pouvez restaurer depuis la sauvegarde si n√©cessaire.');
    process.exit(1);
  }
}

// Gestion des erreurs
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Erreur non g√©r√©e:', reason);
  process.exit(1);
});

process.on('SIGINT', () => {
  console.log('\n\n‚ùå Migration interrompue par l\'utilisateur.');
  process.exit(1);
});

// Lancer la migration
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(error => {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
  });
}

export { runCommand, cleanReports, showSummary };